import { getValues } from "@velo/google-sheets-integration-backend";
import { getSecret } from "wix-secrets-backend";

export const getResults = async (range) =>
{
    try
    {
        const sheetId = await getSecretSheetId();
        const result = await getValues(sheetId, range);
        
        return result;
    }
    catch (err)
    {
        return Promise.reject('getEmailWrapper failed. Info: ' + err);
    }
}

export const getResultsBrokers = async (range) =>
{
    try
    {
        const sheetId = await getSecretSheetIdBrokers();
        const result = await getValues(sheetId, range);
        
        return result;
    }
    catch (err)
    {
        return Promise.reject('getEmailWrapper failed. Info: ' + err);
    }
}



/*
export const getEmailWrapper = async (inputName) =>
{
    let response = "Not found";
    try
    {
        const sheetId = await getSecretSheetId();
        const result = await getValues(sheetId, "Full_Database_Backend!A3:R5");
        let found = false;
        let position = 0;
        let response = "Not found";
        inputName = inputName.toUpperCase();
        for (let i = 0; i < result.data.values.length && !found; i++)
        {
            for (let j = 0; j < result.data.values[i].length && !found; j++)
            {
                let value = "" + result.data.values[i][j];
                value = value.toUpperCase();
                position = value.indexOf(inputName);
                //console.log( "" + i + " ; " + j + " ; _" + inputName +  "_ ; _" + value + "_ ; " + position );
                if (position != -1)
                {
                    found = true;
                    response = result.data.values[i][7];
                }
            }
        }
        return response;
    }
    catch (err)
    {
        return Promise.reject('getEmailWrapper failed. Info: ' + err);
    }
    return response;
}

export const getTemplatesWrapper = async (template_filter_recipient = "") =>
{
    try
    {
        const sheetId = await getSecretSheetId();
        const result = await getValues(sheetId, "email_Templates!A1:K200");

        var Templates = new Map();
        
        // Read Templates
        for ( var i = 0; i < result.data.values.length; i++ )
        {
          var TemplateRecipient = result.data.values[i][0];
          var TemplateType = result.data.values[i][1];
          var TemplateID = result.data.values[i][2];
          var TemplateContent = result.data.values[i][3];
        
          if ( TemplateContent != "" && ( template_filter_recipient == "" || template_filter_recipient == TemplateRecipient ) )
          {
            if (! Templates[TemplateType])
            {
              Templates[TemplateType] = new Array();
            }
            Templates[TemplateType].push( TemplateContent );
          }
        }

console.log(Templates.length + " ;" + JSON.stringify(Templates));

        return Templates;

    }
    catch (err)
    {
        return Promise.reject('getTemplatesWrapper failed. Info: ' + err);
    }
}
*/
const getSecretSheetIdBrokers = async() =>
{
    const id = "1IVmwJBEJ7TnsbNri7ZK9obf_WtH9gH80IPzyc3H_3II";
    return id;
}

const getSecretSheetId = async() =>
{
    const id = await getSecret('sheetId');
    return id;
}

